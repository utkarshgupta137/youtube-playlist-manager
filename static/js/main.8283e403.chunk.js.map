{"version":3,"sources":["api/apiHandler.js","utils/urlUtils.js","components/header/HeaderView.jsx","components/header/headerState.js","components/playlistItems/PlaylistItemsView.jsx","components/playlistItems/playlistItemsState.js","App.jsx","store.js","index.jsx"],"names":["GoogleAuth","GoogleUser","getURL","url","URL","e","startsWith","isPlaylistUrl","urlObj","searchParams","has","HeaderView","setUrl","useState","currentUrl","setCurrentUrl","isSearchButtonDisabled","id","type","value","onChange","target","placeholder","disabled","onClick","icon","faSearch","headerSlice","createSlice","name","initialState","reducers","updateUrl","state","action","payload","actions","PlaylistItemsView","playlistItemsList","map","playlistItem","JSON","stringify","discoveryDocs","scope","updateAuthStatus","currentUser","get","hasGrantedScopes","listPlaylistItems","playlistId","pageToken","a","gapi","client","youtube","playlistItems","list","part","maxResults","listVideos","videos","playlistItemsError","playlistItemsToken","playlistItemsSlice","listPlaylistItemsSuccess","listPlaylistItemsFailed","listVideosSuccess","i","video","listVideosFailed","fetchVideos","ids","dispatch","then","response","result","items","catch","App","components","useDispatch","useSelector","headerView","playlistItemsView","useCallback","newUrl","useEffect","getPlaylistId","snippet","resourceId","videoId","nextPageToken","length","store","configureStore","reducer","combineReducers","headerState","playlistItemsState","load","init","apiKey","clientId","auth2","getAuthInstance","isSignedIn","listen","Promise","wait","resolve","setTimeout","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8283e403.chunk.js","sourcesContent":["import { apiKey, clientId } from \"./client_secrets.json\";\n\nconst discoveryDocs = [\n  \"https://www.googleapis.com/discovery/v1/apis/youtube/v3/rest\",\n];\nconst scope = \"https://www.googleapis.com/auth/youtube.readonly\";\n\nlet GoogleAuth;\nlet GoogleUser;\nlet isAuthorized;\n\nfunction getAuthStatus() {\n  return isAuthorized;\n}\n\nfunction updateAuthStatus() {\n  GoogleUser = GoogleAuth.currentUser.get();\n  isAuthorized = GoogleUser.hasGrantedScopes(scope);\n  return isAuthorized;\n}\n\nfunction initClient() {\n  gapi.load(\"client:auth2\", () => {\n    return gapi.client\n      .init({\n        apiKey,\n        clientId,\n        discoveryDocs,\n        scope,\n      })\n      .then(() => {\n        GoogleAuth = gapi.auth2.getAuthInstance();\n        GoogleAuth.isSignedIn.listen(updateAuthStatus);\n        return updateAuthStatus();\n      });\n  });\n\n  return new Promise(function wait(resolve) {\n    if (gapi.client && gapi.client.youtube) {\n      return resolve();\n    }\n    return setTimeout(() => {\n      return wait(resolve);\n    }, 100);\n  });\n}\n\nasync function grantAuth() {\n  if (isAuthorized) {\n    return GoogleUser;\n  }\n  return GoogleAuth.signIn();\n}\n\nasync function listChannels(forUsername, pageToken) {\n  if (forUsername === \"mine\") {\n    return forUsername;\n  }\n  return gapi.client.youtube.channels.list({\n    part: [\"snippet,contentDetails\"],\n    maxResults: 50,\n    forUsername,\n    pageToken,\n  });\n}\n\nasync function listPlaylists(channelId, pageToken) {\n  if (channelId === \"mine\") {\n    return gapi.client.youtube.playlists.list({\n      part: [\"snippet,contentDetails\"],\n      maxResults: 50,\n      mine: true,\n      pageToken,\n    });\n  }\n  return gapi.client.youtube.playlists.list({\n    part: [\"snippet,contentDetails\"],\n    maxResults: 50,\n    channelId,\n    pageToken,\n  });\n}\n\nasync function listPlaylistItems(playlistId, pageToken) {\n  return gapi.client.youtube.playlistItems.list({\n    part: [\"snippet,contentDetails\"],\n    maxResults: 50,\n    playlistId,\n    pageToken,\n  });\n}\n\nasync function listVideos(id, pageToken) {\n  return gapi.client.youtube.videos.list({\n    part: [\"snippet,contentDetails,statistics,status\"],\n    maxResults: 50,\n    id,\n    pageToken,\n  });\n}\n\nexport {\n  getAuthStatus,\n  grantAuth,\n  initClient,\n  listChannels,\n  listPlaylists,\n  listPlaylistItems,\n  listVideos,\n};\n","const getURL = (url) => {\n  try {\n    return new URL(url);\n  } catch (e) {\n    if (!url || url.startsWith(\"http://\") || url.startsWith(\"https://\")) {\n      return null;\n    }\n    return getURL(`https://${url}`);\n  }\n};\n\nconst isChannelUrl = (url) => {\n  const urlObj = getURL(url);\n  if (urlObj) {\n    return (\n      urlObj.pathname.startsWith(\"/channel/\") ||\n      urlObj.pathname.startsWith(\"/c/\") ||\n      urlObj.pathname.startsWith(\"/user/\")\n    );\n  }\n  return false;\n};\n\nconst isPlaylistUrl = (url) => {\n  const urlObj = getURL(url);\n  if (urlObj) {\n    return urlObj.searchParams.has(\"list\");\n  }\n  return false;\n};\n\nconst getChannelUrl = (id) => {\n  return `youtube.com/channel/${id}`;\n};\n\nconst getPlaylistUrl = (id) => {\n  return `youtube.com/playlist?list=${id}`;\n};\n\nconst getChannelId = (url) => {\n  const urlObj = getURL(url);\n  if (urlObj) {\n    return urlObj.pathname.split(\"/\").slice(-1)[0];\n  }\n  return null;\n};\n\nconst getPlaylistId = (url) => {\n  const urlObj = getURL(url);\n  if (urlObj) {\n    return urlObj.searchParams.get(\"list\");\n  }\n  return null;\n};\n\nexport {\n  isChannelUrl,\n  isPlaylistUrl,\n  getChannelUrl,\n  getPlaylistUrl,\n  getChannelId,\n  getPlaylistId,\n};\n","import { faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport PropTypes from \"prop-types\";\nimport React, { useState } from \"react\";\n\nimport { isPlaylistUrl } from \"../../utils/urlUtils\";\nimport \"./HeaderView.css\";\n\nconst HeaderView = ({ url, setUrl }) => {\n  const [currentUrl, setCurrentUrl] = useState(url);\n\n  const onCurrentUrlChanged = (e) => {\n    setCurrentUrl(e.target.value);\n  };\n\n  const onSearchButtonClicked = () => {\n    setUrl(currentUrl);\n  };\n\n  let isSearchButtonDisabled = true;\n  if (isPlaylistUrl(currentUrl)) {\n    isSearchButtonDisabled = false;\n  }\n\n  return (\n    <div id=\"header\">\n      <input\n        id=\"url\"\n        type=\"text\"\n        value={currentUrl}\n        onChange={onCurrentUrlChanged}\n        placeholder=\"Playlist URL\"\n      />\n      <button\n        id=\"search\"\n        type=\"button\"\n        disabled={isSearchButtonDisabled}\n        onClick={onSearchButtonClicked}\n      >\n        <FontAwesomeIcon icon={faSearch} />\n      </button>\n    </div>\n  );\n};\n\nHeaderView.propTypes = {\n  url: PropTypes.string.isRequired,\n  setUrl: PropTypes.func.isRequired,\n};\n\nexport default HeaderView;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  url: \"youtube.com/channel/mine\",\n};\n\nconst headerSlice = createSlice({\n  name: \"header\",\n  initialState,\n  reducers: {\n    updateUrl(state, action) {\n      state.url = action.payload.url;\n    },\n  },\n});\n\nexport const { updateUrl } = headerSlice.actions;\n\nexport default headerSlice.reducer;\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\n\nconst PlaylistItemsView = ({ playlistItemsList }) => {\n  return (\n    <div id=\"playlistItems\">\n      <ul>\n        {playlistItemsList.map((playlistItem) => {\n          return <li>{JSON.stringify(playlistItem)}</li>;\n        })}\n      </ul>\n    </div>\n  );\n};\n\nPlaylistItemsView.propTypes = {\n  playlistItemsList: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default PlaylistItemsView;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nimport { listPlaylistItems, listVideos } from \"../../api/apiHandler\";\n\nconst initialState = {\n  playlistItemsList: [],\n  playlistItemsError: {},\n  playlistItemsToken: \"\",\n};\n\nconst playlistItemsSlice = createSlice({\n  name: \"playlistItems\",\n  initialState,\n  reducers: {\n    listPlaylistItemsSuccess(state, action) {\n      state.playlistItemsError = initialState.playlistItemsError;\n\n      state.playlistItemsList = action.payload.playlistItemsList;\n      state.playlistItemsToken = action.payload.playlistItemsToken;\n    },\n    listPlaylistItemsFailed(state, action) {\n      state.playlistItemsList = initialState.playlistItemsList;\n      state.playlistItemsToken = initialState.playlistItemsToken;\n\n      state.playlistItemsError = action.payload.playlistItemsError;\n    },\n    listVideosSuccess(state, action) {\n      state.playlistItemsError = initialState.playlistItemsError;\n\n      state.playlistItemsList = state.playlistItemsList.map(\n        (playlistItem, i) => {\n          return {\n            ...playlistItem,\n            video: action.payload.playlistItemsList[i],\n          };\n        }\n      );\n    },\n    listVideosFailed(state, action) {\n      state.playlistItemsList = initialState.playlistItemsList;\n      state.playlistItemsToken = initialState.playlistItemsToken;\n\n      state.playlistItemsError = action.payload.playlistItemsError;\n    },\n  },\n});\n\nconst {\n  listPlaylistItemsSuccess,\n  listPlaylistItemsFailed,\n  listVideosSuccess,\n  listVideosFailed,\n} = playlistItemsSlice.actions;\n\nconst fetchVideos = (ids) => {\n  return async (dispatch) => {\n    listVideos(ids)\n      .then((response) => {\n        return dispatch(\n          listVideosSuccess({\n            playlistItemsList: response.result.items,\n          })\n        );\n      })\n      .catch((response) => {\n        dispatch(\n          listVideosFailed({\n            playlistItemsError: response,\n          })\n        );\n      });\n  };\n};\n\nconst fetchPlaylistItems = (playlistId) => {\n  return async (dispatch) => {\n    listPlaylistItems(playlistId)\n      .then((response) => {\n        const ids = response.result.items.map((playlistItem) => {\n          return playlistItem.snippet.resourceId.videoId;\n        });\n        dispatch(fetchVideos(ids));\n\n        return dispatch(\n          listPlaylistItemsSuccess({\n            playlistItemsList: response.result.items,\n            playlistItemsToken: response.result.nextPageToken,\n          })\n        );\n      })\n      .catch((response) => {\n        dispatch(\n          listPlaylistItemsFailed({\n            playlistItemsError: response,\n          })\n        );\n      });\n  };\n};\n\nexport { fetchPlaylistItems, fetchVideos };\n\nexport default playlistItemsSlice.reducer;\n","import React, { useCallback, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport HeaderView from \"./components/header/HeaderView\";\nimport { updateUrl } from \"./components/header/headerState\";\nimport PlaylistItemsView from \"./components/playlistItems/PlaylistItemsView\";\nimport { fetchPlaylistItems } from \"./components/playlistItems/playlistItemsState\";\nimport { isPlaylistUrl, getPlaylistId } from \"./utils/urlUtils\";\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  const { url } = useSelector((state) => {\n    return state.headerView;\n  });\n\n  const { playlistItemsList } = useSelector((state) => {\n    return state.playlistItemsView;\n  });\n\n  const setUrl = useCallback(\n    (newUrl) => {\n      if (isPlaylistUrl(newUrl)) {\n        dispatch(updateUrl({ url: newUrl }));\n      }\n    },\n    [dispatch]\n  );\n\n  useEffect(() => {\n    if (isPlaylistUrl(url)) {\n      dispatch(fetchPlaylistItems(getPlaylistId(url)));\n    }\n  }, [url, dispatch]);\n\n  let components;\n  if (isPlaylistUrl(url) && playlistItemsList.length > 0) {\n    components = <PlaylistItemsView playlistItemsList={playlistItemsList} />;\n  }\n\n  return (\n    <div id=\"app\">\n      <HeaderView url={url} setUrl={setUrl} />\n      {components}\n    </div>\n  );\n};\n\nexport default App;\n","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\n\nimport headerState from \"./components/header/headerState\";\nimport playlistItemsState from \"./components/playlistItems/playlistItemsState\";\n\nconst store = configureStore({\n  reducer: combineReducers({\n    headerView: headerState,\n    playlistItemsView: playlistItemsState,\n  }),\n});\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport App from \"./App\";\nimport { initClient } from \"./api/apiHandler\";\nimport store from \"./store\";\n\nimport \"./index.css\";\n\ninitClient().then(() => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  );\n});\n"],"sourceRoot":""}