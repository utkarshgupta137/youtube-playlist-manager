{"version":3,"sources":["api/apiHandler.js","utils/urlUtils.js","components/Header/HeaderView.jsx","components/Header/headerState.js","components/Table/Table.jsx","components/PlaylistItems/PlaylistItemsView.jsx","components/PlaylistItems/playlistItemsState.js","App.jsx","store.js","index.jsx"],"names":["GoogleAuth","GoogleUser","getURL","url","URL","e","startsWith","isPlaylistUrl","urlObj","searchParams","has","HeaderView","setUrl","useState","currentUrl","setCurrentUrl","searchDisabled","setSearchDisabled","onSearchButtonClicked","setTimeout","useEffect","id","type","value","onChange","target","onKeyDown","event","key","placeholder","disabled","onClick","IconButton","edge","component","href","headerSlice","createSlice","name","initialState","reducers","updateUrl","state","action","payload","actions","Table","columns","data","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","TableHead","map","headerGroup","TableRow","getHeaderGroupProps","headers","column","TableCell","getHeaderProps","render","TableBody","row","getRowProps","cells","cell","getCellProps","PlaylistItemsView","playlistItemsList","useMemo","Header","accessor","cloneDeep","playlistItem","snippet","position","publishedAt","substring","video","contentDetails","duration","replace","toLowerCase","discoveryDocs","scope","updateAuthStatus","currentUser","get","hasGrantedScopes","listPlaylistItems","playlistId","pageToken","a","gapi","client","youtube","playlistItems","list","part","maxResults","listVideos","videos","playlistItemsError","playlistItemsToken","playlistItemsSlice","listPlaylistItemsSuccess","listPlaylistItemsFailed","App","components","dispatch","useDispatch","useSelector","headerView","playlistItemsView","useCallback","newUrl","getPlaylistId","then","response","result","items","resourceId","videoId","forEach","i","nextPageToken","catch","length","CssBaseline","rootReducer","combineReducers","headerState","playlistItemsState","persistConfig","version","storage","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","load","init","apiKey","clientId","auth2","getAuthInstance","isSignedIn","listen","Promise","wait","resolve","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d911b2c8.chunk.js","sourcesContent":["import { apiKey, clientId } from \"./client_secrets.json\";\n\nconst discoveryDocs = [\n  \"https://www.googleapis.com/discovery/v1/apis/youtube/v3/rest\",\n];\nconst scope = \"https://www.googleapis.com/auth/youtube.readonly\";\n\nlet GoogleAuth;\nlet GoogleUser;\nlet isAuthorized;\n\nfunction getAuthStatus() {\n  return isAuthorized;\n}\n\nfunction updateAuthStatus() {\n  GoogleUser = GoogleAuth.currentUser.get();\n  isAuthorized = GoogleUser.hasGrantedScopes(scope);\n  return isAuthorized;\n}\n\nfunction initClient() {\n  gapi.load(\"client:auth2\", () => {\n    return gapi.client\n      .init({\n        apiKey,\n        clientId,\n        discoveryDocs,\n        scope,\n      })\n      .then(() => {\n        GoogleAuth = gapi.auth2.getAuthInstance();\n        GoogleAuth.isSignedIn.listen(updateAuthStatus);\n        return updateAuthStatus();\n      });\n  });\n\n  return new Promise(function wait(resolve) {\n    if (gapi.client && gapi.client.youtube) {\n      return resolve();\n    }\n    return setTimeout(() => {\n      return wait(resolve);\n    }, 100);\n  });\n}\n\nasync function grantAuth() {\n  if (isAuthorized) {\n    return GoogleUser;\n  }\n  return GoogleAuth.signIn();\n}\n\nasync function listChannels(forUsername, pageToken) {\n  if (forUsername === \"mine\") {\n    return forUsername;\n  }\n  return gapi.client.youtube.channels.list({\n    part: [\"snippet,contentDetails\"],\n    maxResults: 50,\n    forUsername,\n    pageToken,\n  });\n}\n\nasync function listPlaylists(channelId, pageToken) {\n  if (channelId === \"mine\") {\n    return gapi.client.youtube.playlists.list({\n      part: [\"snippet,contentDetails\"],\n      maxResults: 50,\n      mine: true,\n      pageToken,\n    });\n  }\n  return gapi.client.youtube.playlists.list({\n    part: [\"snippet,contentDetails\"],\n    maxResults: 50,\n    channelId,\n    pageToken,\n  });\n}\n\nasync function listPlaylistItems(playlistId, pageToken) {\n  return gapi.client.youtube.playlistItems.list({\n    part: [\"snippet\"],\n    maxResults: 50,\n    playlistId,\n    pageToken,\n  });\n}\n\nasync function listVideos(id, pageToken) {\n  return gapi.client.youtube.videos.list({\n    part: [\"snippet,contentDetails,statistics\"],\n    maxResults: 50,\n    id,\n    pageToken,\n  });\n}\n\nexport {\n  getAuthStatus,\n  grantAuth,\n  initClient,\n  listChannels,\n  listPlaylists,\n  listPlaylistItems,\n  listVideos,\n};\n","const getURL = (url) => {\n  try {\n    return new URL(url);\n  } catch (e) {\n    if (!url || url.startsWith(\"http://\") || url.startsWith(\"https://\")) {\n      return null;\n    }\n    return getURL(`https://${url}`);\n  }\n};\n\nconst isChannelUrl = (url) => {\n  const urlObj = getURL(url);\n  if (urlObj) {\n    return (\n      urlObj.pathname.startsWith(\"/channel/\") ||\n      urlObj.pathname.startsWith(\"/c/\") ||\n      urlObj.pathname.startsWith(\"/user/\")\n    );\n  }\n  return false;\n};\n\nconst isPlaylistUrl = (url) => {\n  const urlObj = getURL(url);\n  if (urlObj) {\n    return urlObj.searchParams.has(\"list\");\n  }\n  return false;\n};\n\nconst getChannelUrl = (id) => {\n  return `youtube.com/channel/${id}`;\n};\n\nconst getPlaylistUrl = (id) => {\n  return `youtube.com/playlist?list=${id}`;\n};\n\nconst getChannelId = (url) => {\n  const urlObj = getURL(url);\n  if (urlObj) {\n    return urlObj.pathname.split(\"/\").slice(-1)[0];\n  }\n  return null;\n};\n\nconst getPlaylistId = (url) => {\n  const urlObj = getURL(url);\n  if (urlObj) {\n    return urlObj.searchParams.get(\"list\");\n  }\n  return null;\n};\n\nexport {\n  isChannelUrl,\n  isPlaylistUrl,\n  getChannelUrl,\n  getPlaylistUrl,\n  getChannelId,\n  getPlaylistId,\n};\n","import IconButton from \"@material-ui/core/IconButton\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport PropTypes from \"prop-types\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { isPlaylistUrl } from \"../../utils/urlUtils\";\nimport \"./HeaderView.css\";\n\nconst HeaderView = ({ url, setUrl }) => {\n  const [currentUrl, setCurrentUrl] = useState(url);\n  const [searchDisabled, setSearchDisabled] = useState(true);\n\n  const onCurrentUrlChanged = (e) => {\n    setCurrentUrl(e.target.value);\n  };\n\n  const onSearchButtonClicked = () => {\n    setUrl(currentUrl);\n    setSearchDisabled(true);\n    setTimeout(() => {\n      setSearchDisabled(false);\n    }, 3000);\n  };\n\n  const handleKeyDown = (event) => {\n    if (event.key === \"Enter\") {\n      onSearchButtonClicked();\n    }\n  };\n\n  useEffect(() => {\n    if (isPlaylistUrl(currentUrl)) {\n      setSearchDisabled(false);\n    } else {\n      setSearchDisabled(true);\n    }\n  }, [url, currentUrl]);\n\n  return (\n    <div id=\"header\">\n      <input\n        id=\"url\"\n        type=\"text\"\n        value={currentUrl}\n        onChange={onCurrentUrlChanged}\n        onKeyDown={handleKeyDown}\n        placeholder=\"Playlist URL\"\n      />\n      <button\n        id=\"search\"\n        type=\"button\"\n        disabled={searchDisabled}\n        onClick={onSearchButtonClicked}\n      >\n        {url === currentUrl ? <RefreshIcon /> : <SearchIcon />}\n      </button>\n      <IconButton\n        id=\"github\"\n        edge=\"end\"\n        component=\"a\"\n        href=\"https://github.com/utkarshgupta137/youtube-playlist-manager\"\n      >\n        <GitHubIcon />\n      </IconButton>\n    </div>\n  );\n};\n\nHeaderView.propTypes = {\n  url: PropTypes.string.isRequired,\n  setUrl: PropTypes.func.isRequired,\n};\n\nexport default HeaderView;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  url:\n    \"https://www.youtube.com/playlist?list=PLZHQObOWTQDOcxqQ36Vow3TdTRjkdSvT-\",\n};\n\nconst headerSlice = createSlice({\n  name: \"header\",\n  initialState,\n  reducers: {\n    updateUrl(state, action) {\n      state.url = action.payload.url;\n    },\n  },\n});\n\nexport const { updateUrl } = headerSlice.actions;\n\nexport default headerSlice.reducer;\n","import MuiTable from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { useTable } from \"react-table\";\n\nimport \"./Table.css\";\n\nconst Table = ({ columns, data }) => {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({\n    columns,\n    data,\n  });\n\n  return (\n    <MuiTable {...getTableProps()}>\n      <TableHead>\n        {headerGroups.map((headerGroup) => {\n          return (\n            <TableRow {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => {\n                return (\n                  <TableCell {...column.getHeaderProps()}>\n                    {column.render(\"Header\")}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          );\n        })}\n      </TableHead>\n      <TableBody {...getTableBodyProps()}>\n        {rows.map((row) => {\n          prepareRow(row);\n          return (\n            <TableRow {...row.getRowProps()}>\n              {row.cells.map((cell) => {\n                return (\n                  <TableCell {...cell.getCellProps()}>\n                    {cell.render(\"Cell\")}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          );\n        })}\n      </TableBody>\n    </MuiTable>\n  );\n};\n\nTable.propTypes = {\n  columns: PropTypes.arrayOf(PropTypes.object).isRequired,\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default Table;\n","import cloneDeep from \"lodash/cloneDeep\";\nimport PropTypes from \"prop-types\";\nimport React, { useMemo } from \"react\";\n\nimport Table from \"../Table/Table\";\n\nimport \"./PlaylistItemsView.css\";\n\nconst PlaylistItemsView = ({ playlistItemsList }) => {\n  const columns = useMemo(() => {\n    return [\n      {\n        Header: \"Playlist Info\",\n        columns: [\n          {\n            Header: \"Position\",\n            accessor: \"snippet.position\",\n          },\n          {\n            Header: \"Added by\",\n            accessor: \"snippet.channelTitle\",\n          },\n          {\n            Header: \"Added on\",\n            accessor: \"snippet.publishedAt\",\n          },\n        ],\n      },\n      {\n        Header: \"Video Info\",\n        columns: [\n          {\n            Header: \"Title\",\n            accessor: \"video.snippet.title\",\n          },\n          {\n            Header: \"Channel Title\",\n            accessor: \"video.snippet.channelTitle\",\n          },\n          {\n            Header: \"Published on\",\n            accessor: \"video.snippet.publishedAt\",\n          },\n          {\n            Header: \"Duration\",\n            accessor: \"video.contentDetails.duration\",\n          },\n        ],\n      },\n      {\n        Header: \"Video Statistics\",\n        columns: [\n          {\n            Header: \"View Count\",\n            accessor: \"video.statistics.viewCount\",\n          },\n          {\n            Header: \"Like Count\",\n            accessor: \"video.statistics.likeCount\",\n          },\n          {\n            Header: \"Dislike Count\",\n            accessor: \"video.statistics.dislikeCount\",\n          },\n          {\n            Header: \"Comment Count\",\n            accessor: \"video.statistics.commentCount\",\n          },\n        ],\n      },\n    ];\n  }, []);\n\n  const data = useMemo(() => {\n    return cloneDeep(playlistItemsList).map((playlistItem) => {\n      playlistItem.snippet.position += 1;\n      playlistItem.snippet.publishedAt = playlistItem.snippet.publishedAt.substring(\n        0,\n        10\n      );\n\n      if (playlistItem.video) {\n        playlistItem.video.snippet.publishedAt = playlistItem.video.snippet.publishedAt.substring(\n          0,\n          10\n        );\n        playlistItem.video.contentDetails.duration = playlistItem.video.contentDetails.duration\n          .replace(\"P\", \"\")\n          .replace(\"T\", \"\")\n          .toLowerCase();\n      }\n\n      return playlistItem;\n    });\n  }, [playlistItemsList]);\n\n  return (\n    <div id=\"playlistItems\">\n      <Table columns={columns} data={data} />\n    </div>\n  );\n};\n\nPlaylistItemsView.propTypes = {\n  playlistItemsList: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default PlaylistItemsView;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nimport { listPlaylistItems, listVideos } from \"../../api/apiHandler\";\n\nconst initialState = {\n  playlistItemsList: [],\n  playlistItemsError: {},\n  playlistItemsToken: \"\",\n};\n\nconst playlistItemsSlice = createSlice({\n  name: \"playlistItems\",\n  initialState,\n  reducers: {\n    listPlaylistItemsSuccess(state, action) {\n      state.playlistItemsError = initialState.playlistItemsError;\n\n      state.playlistItemsList = action.payload.playlistItemsList;\n      state.playlistItemsToken = action.payload.playlistItemsToken;\n    },\n    listPlaylistItemsFailed(state, action) {\n      state.playlistItemsList = initialState.playlistItemsList;\n      state.playlistItemsToken = initialState.playlistItemsToken;\n\n      state.playlistItemsError = action.payload.playlistItemsError;\n    },\n  },\n});\n\nconst {\n  listPlaylistItemsSuccess,\n  listPlaylistItemsFailed,\n} = playlistItemsSlice.actions;\n\nconst fetchVideos = (result) => {\n  return async (dispatch) => {\n    const ids = result.items.map((playlistItem) => {\n      return playlistItem.snippet.resourceId.videoId;\n    });\n\n    listVideos(ids)\n      .then((response) => {\n        result.items.forEach((playlistItem, i) => {\n          playlistItem.video = response.result.items[i];\n        });\n\n        return dispatch(\n          listPlaylistItemsSuccess({\n            playlistItemsList: result.items,\n            playlistItemsToken: result.nextPageToken,\n          })\n        );\n      })\n      .catch((response) => {\n        return dispatch(\n          listPlaylistItemsFailed({\n            playlistItemsError: response,\n          })\n        );\n      });\n  };\n};\n\nconst fetchPlaylistItems = (playlistId) => {\n  return async (dispatch) => {\n    listPlaylistItems(playlistId)\n      .then((response) => {\n        return dispatch(fetchVideos(response.result));\n      })\n      .catch((response) => {\n        return dispatch(\n          listPlaylistItemsFailed({\n            playlistItemsError: response,\n          })\n        );\n      });\n  };\n};\n\nexport { fetchPlaylistItems, fetchVideos };\n\nexport default playlistItemsSlice.reducer;\n","import CssBaseline from \"@material-ui/core/CssBaseline\";\nimport React, { useCallback } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport HeaderView from \"./components/Header/HeaderView\";\nimport { updateUrl } from \"./components/Header/headerState\";\nimport PlaylistItemsView from \"./components/PlaylistItems/PlaylistItemsView\";\nimport { fetchPlaylistItems } from \"./components/PlaylistItems/playlistItemsState\";\nimport { isPlaylistUrl, getPlaylistId } from \"./utils/urlUtils\";\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  const { url } = useSelector((state) => {\n    return state.headerView;\n  });\n\n  const { playlistItemsList } = useSelector((state) => {\n    return state.playlistItemsView;\n  });\n\n  const setUrl = useCallback(\n    (newUrl) => {\n      if (isPlaylistUrl(newUrl)) {\n        dispatch(updateUrl({ url: newUrl }));\n        dispatch(fetchPlaylistItems(getPlaylistId(newUrl)));\n      }\n    },\n    [dispatch]\n  );\n\n  let components;\n  if (isPlaylistUrl(url) && playlistItemsList.length > 0) {\n    components = <PlaylistItemsView playlistItemsList={playlistItemsList} />;\n  }\n\n  return (\n    <>\n      <CssBaseline />\n      <HeaderView url={url} setUrl={setUrl} />\n      {components}\n    </>\n  );\n};\n\nexport default App;\n","import {\n  configureStore,\n  combineReducers,\n  getDefaultMiddleware,\n} from \"@reduxjs/toolkit\";\nimport {\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nimport headerState from \"./components/Header/headerState\";\nimport playlistItemsState from \"./components/PlaylistItems/playlistItemsState\";\n\nconst rootReducer = combineReducers({\n  headerView: headerState,\n  playlistItemsView: playlistItemsState,\n});\n\nconst persistConfig = {\n  key: \"root\",\n  version: 1,\n  storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n});\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { persistStore } from \"redux-persist\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nimport App from \"./App\";\nimport { initClient } from \"./api/apiHandler\";\nimport store from \"./store\";\n\nimport \"./index.css\";\n\nconst persistor = persistStore(store);\n\ninitClient()\n  .then(() => {\n    ReactDOM.render(\n      <React.StrictMode>\n        <Provider store={store}>\n          <PersistGate persistor={persistor}>\n            <App />\n          </PersistGate>\n        </Provider>\n      </React.StrictMode>,\n      document.getElementById(\"root\")\n    );\n    return true;\n  })\n  .catch(() => {\n    return false;\n  });\n"],"sourceRoot":""}