{"version":3,"sources":["api/apiHandler.js","utils/urlUtils.js","components/Header/HeaderView.jsx","components/Header/headerState.js","components/Table/Table.jsx","components/PlaylistItems/PlaylistItemsView.jsx","components/PlaylistItems/playlistItemsState.js","App.jsx","store.js","index.jsx"],"names":["GoogleAuth","GoogleUser","getURL","url","URL","e","startsWith","isPlaylistUrl","urlObj","searchParams","has","getPlaylistId","get","HeaderView","setUrl","useState","currentUrl","setCurrentUrl","searchDisabled","setSearchDisabled","onSearchButtonClicked","setTimeout","useEffect","id","type","value","onChange","target","onKeyDown","event","key","placeholder","disabled","onClick","icon","faRedo","faSearch","href","rel","faGithub","headerSlice","createSlice","name","initialState","reducers","updateUrl","state","action","payload","actions","Table","columns","data","hasMore","next","useTable","useGridLayout","getTableProps","headerGroups","rows","prepareRow","dataLength","length","loader","className","map","headerGroup","headers","column","console","log","getHeaderProps","render","row","cells","cell","getCellProps","PlaylistItemsView","playlistItemsList","useMemo","Header","accessor","cloneDeep","playlistItem","snippet","position","publishedAt","substring","video","contentDetails","duration","replace","toLowerCase","discoveryDocs","scope","updateAuthStatus","currentUser","hasGrantedScopes","listPlaylistItems","playlistId","pageToken","a","gapi","client","youtube","playlistItems","list","part","maxResults","listVideos","videos","playlistItemsError","playlistItemsToken","playlistItemsSlice","listPlaylistItemsSuccess","listPlaylistItemsFailed","fetchPlaylistItems","dispatch","then","response","result","getState","items","resourceId","videoId","forEach","i","prevPageToken","playlistItemsView","concat","nextPageToken","catch","App","useDispatch","useSelector","headerView","useCallback","newUrl","fetchMorePlaylistItems","rootReducer","combineReducers","headerState","playlistItemsState","persistConfig","version","storage","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","load","init","apiKey","clientId","auth2","getAuthInstance","isSignedIn","listen","Promise","wait","resolve","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b38c7ae.chunk.js","sourcesContent":["import { apiKey, clientId } from \"./client_secrets.json\";\n\nconst discoveryDocs = [\n  \"https://www.googleapis.com/discovery/v1/apis/youtube/v3/rest\",\n];\nconst scope = \"https://www.googleapis.com/auth/youtube.readonly\";\n\nlet GoogleAuth;\nlet GoogleUser;\nlet isAuthorized;\n\nfunction getAuthStatus() {\n  return isAuthorized;\n}\n\nfunction updateAuthStatus() {\n  GoogleUser = GoogleAuth.currentUser.get();\n  isAuthorized = GoogleUser.hasGrantedScopes(scope);\n  return isAuthorized;\n}\n\nfunction initClient() {\n  gapi.load(\"client:auth2\", () => {\n    return gapi.client\n      .init({\n        apiKey,\n        clientId,\n        discoveryDocs,\n        scope,\n      })\n      .then(() => {\n        GoogleAuth = gapi.auth2.getAuthInstance();\n        GoogleAuth.isSignedIn.listen(updateAuthStatus);\n        return updateAuthStatus();\n      });\n  });\n\n  return new Promise(function wait(resolve) {\n    if (gapi.client && gapi.client.youtube) {\n      return resolve();\n    }\n    return setTimeout(() => {\n      return wait(resolve);\n    }, 100);\n  });\n}\n\nasync function grantAuth() {\n  if (isAuthorized) {\n    return GoogleUser;\n  }\n  return GoogleAuth.signIn();\n}\n\nasync function listChannels(forUsername, pageToken) {\n  if (forUsername === \"mine\") {\n    return forUsername;\n  }\n  return gapi.client.youtube.channels.list({\n    part: [\"snippet,contentDetails\"],\n    maxResults: 50,\n    forUsername,\n    pageToken,\n  });\n}\n\nasync function listPlaylists(channelId, pageToken) {\n  if (channelId === \"mine\") {\n    return gapi.client.youtube.playlists.list({\n      part: [\"snippet,contentDetails\"],\n      maxResults: 50,\n      mine: true,\n      pageToken,\n    });\n  }\n  return gapi.client.youtube.playlists.list({\n    part: [\"snippet,contentDetails\"],\n    maxResults: 50,\n    channelId,\n    pageToken,\n  });\n}\n\nasync function listPlaylistItems(playlistId, pageToken) {\n  return gapi.client.youtube.playlistItems.list({\n    part: [\"snippet\"],\n    maxResults: 50,\n    playlistId,\n    pageToken,\n  });\n}\n\nasync function listVideos(id, pageToken) {\n  return gapi.client.youtube.videos.list({\n    part: [\"snippet,contentDetails,statistics\"],\n    maxResults: 50,\n    id,\n    pageToken,\n  });\n}\n\nexport {\n  getAuthStatus,\n  grantAuth,\n  initClient,\n  listChannels,\n  listPlaylists,\n  listPlaylistItems,\n  listVideos,\n};\n","const getURL = (url) => {\n  try {\n    return new URL(url);\n  } catch (e) {\n    if (!url || url.startsWith(\"http://\") || url.startsWith(\"https://\")) {\n      return null;\n    }\n    return getURL(`https://${url}`);\n  }\n};\n\nconst isChannelUrl = (url) => {\n  const urlObj = getURL(url);\n  if (urlObj) {\n    return (\n      urlObj.pathname.startsWith(\"/channel/\") ||\n      urlObj.pathname.startsWith(\"/c/\") ||\n      urlObj.pathname.startsWith(\"/user/\")\n    );\n  }\n  return false;\n};\n\nconst isPlaylistUrl = (url) => {\n  const urlObj = getURL(url);\n  if (urlObj) {\n    return urlObj.searchParams.has(\"list\");\n  }\n  return false;\n};\n\nconst getChannelUrl = (id) => {\n  return `youtube.com/channel/${id}`;\n};\n\nconst getPlaylistUrl = (id) => {\n  return `youtube.com/playlist?list=${id}`;\n};\n\nconst getChannelId = (url) => {\n  const urlObj = getURL(url);\n  if (urlObj) {\n    return urlObj.pathname.split(\"/\").slice(-1)[0];\n  }\n  return null;\n};\n\nconst getPlaylistId = (url) => {\n  const urlObj = getURL(url);\n  if (urlObj) {\n    return urlObj.searchParams.get(\"list\");\n  }\n  return null;\n};\n\nexport {\n  isChannelUrl,\n  isPlaylistUrl,\n  getChannelUrl,\n  getPlaylistUrl,\n  getChannelId,\n  getPlaylistId,\n};\n","import { faGithub } from \"@fortawesome/free-brands-svg-icons\";\nimport { faRedo, faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport PropTypes from \"prop-types\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { isPlaylistUrl } from \"../../utils/urlUtils\";\nimport \"./HeaderView.css\";\n\nconst HeaderView = ({ url, setUrl }) => {\n  const [currentUrl, setCurrentUrl] = useState(url);\n  const [searchDisabled, setSearchDisabled] = useState(true);\n\n  const onCurrentUrlChanged = (e) => {\n    setCurrentUrl(e.target.value);\n  };\n\n  const onSearchButtonClicked = () => {\n    setUrl(currentUrl);\n    setSearchDisabled(true);\n    setTimeout(() => {\n      setSearchDisabled(false);\n    }, 3000);\n  };\n\n  const handleKeyDown = (event) => {\n    if (event.key === \"Enter\") {\n      onSearchButtonClicked();\n    }\n  };\n\n  useEffect(() => {\n    if (isPlaylistUrl(currentUrl)) {\n      setSearchDisabled(false);\n    } else {\n      setSearchDisabled(true);\n    }\n  }, [url, currentUrl]);\n\n  return (\n    <div id=\"header\">\n      <input\n        id=\"url\"\n        type=\"text\"\n        value={currentUrl}\n        onChange={onCurrentUrlChanged}\n        onKeyDown={handleKeyDown}\n        placeholder=\"Playlist URL\"\n      />\n      <button\n        id=\"search\"\n        type=\"button\"\n        disabled={searchDisabled}\n        onClick={onSearchButtonClicked}\n      >\n        <FontAwesomeIcon icon={url === currentUrl ? faRedo : faSearch} />\n      </button>\n      <a\n        id=\"github\"\n        href=\"https://github.com/utkarshgupta137/youtube-playlist-manager\"\n        rel=\"noreferrer\"\n        target=\"_blank\"\n      >\n        <FontAwesomeIcon icon={faGithub} />\n      </a>\n    </div>\n  );\n};\n\nHeaderView.propTypes = {\n  url: PropTypes.string.isRequired,\n  setUrl: PropTypes.func.isRequired,\n};\n\nexport default HeaderView;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  url:\n    \"https://www.youtube.com/playlist?list=PLZHQObOWTQDOcxqQ36Vow3TdTRjkdSvT-\",\n};\n\nconst headerSlice = createSlice({\n  name: \"header\",\n  initialState,\n  reducers: {\n    updateUrl(state, action) {\n      state.url = action.payload.url;\n    },\n  },\n});\n\nexport const { updateUrl } = headerSlice.actions;\n\nexport default headerSlice.reducer;\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { useGridLayout, useTable } from \"react-table\";\n\nimport \"./Table.css\";\n\nconst Table = ({ columns, data, hasMore, next }) => {\n  const { getTableProps, headerGroups, rows, prepareRow } = useTable(\n    {\n      columns,\n      data,\n    },\n    useGridLayout\n  );\n\n  return (\n    <InfiniteScroll\n      dataLength={rows.length}\n      hasMore={hasMore}\n      next={next}\n      loader={<div id=\"loader\">Loading...</div>}\n    >\n      <div {...getTableProps()} className=\"table\">\n        {headerGroups.map((headerGroup) => {\n          return headerGroup.headers.map((column) => {\n            console.log(column);\n            return (\n              <div\n                key={column.id}\n                {...column.getHeaderProps()}\n                className=\"header\"\n              >\n                {column.render(\"Header\")}\n              </div>\n            );\n          });\n        })}\n        {rows.map((row) => {\n          return (\n            prepareRow(row) ||\n            row.cells.map((cell) => {\n              console.log(cell);\n              return (\n                <div {...cell.getCellProps()} className=\"cell\">\n                  {cell.render(\"Cell\")}\n                </div>\n              );\n            })\n          );\n        })}\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nTable.propTypes = {\n  columns: PropTypes.arrayOf(PropTypes.object).isRequired,\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  hasMore: PropTypes.bool.isRequired,\n  next: PropTypes.func.isRequired,\n};\n\nexport default Table;\n","import cloneDeep from \"lodash/cloneDeep\";\nimport PropTypes from \"prop-types\";\nimport React, { useMemo } from \"react\";\n\nimport Table from \"../Table/Table\";\n\nimport \"./PlaylistItemsView.css\";\n\nconst PlaylistItemsView = ({ playlistItemsList, hasMore, next }) => {\n  const columns = useMemo(() => {\n    return [\n      {\n        Header: \"Position\",\n        accessor: \"snippet.position\",\n      },\n      {\n        Header: \"Added by\",\n        accessor: \"snippet.channelTitle\",\n      },\n      {\n        Header: \"Added on\",\n        accessor: \"snippet.publishedAt\",\n      },\n      {\n        Header: \"Title\",\n        accessor: \"video.snippet.title\",\n      },\n      {\n        Header: \"Channel Title\",\n        accessor: \"video.snippet.channelTitle\",\n      },\n      {\n        Header: \"Published on\",\n        accessor: \"video.snippet.publishedAt\",\n      },\n      {\n        Header: \"Duration\",\n        accessor: \"video.contentDetails.duration\",\n      },\n    ];\n  }, []);\n\n  const data = useMemo(() => {\n    return cloneDeep(playlistItemsList).map((playlistItem) => {\n      playlistItem.snippet.position += 1;\n      playlistItem.snippet.publishedAt = playlistItem.snippet.publishedAt.substring(\n        0,\n        10\n      );\n\n      if (playlistItem.video) {\n        playlistItem.video.snippet.publishedAt = playlistItem.video.snippet.publishedAt.substring(\n          0,\n          10\n        );\n        playlistItem.video.contentDetails.duration = playlistItem.video.contentDetails.duration\n          .replace(\"P\", \"\")\n          .replace(\"T\", \"\")\n          .toLowerCase();\n      }\n\n      return playlistItem;\n    });\n  }, [playlistItemsList]);\n\n  return (\n    <div id=\"playlistItems\">\n      <Table columns={columns} data={data} hasMore={hasMore} next={next} />\n    </div>\n  );\n};\n\nPlaylistItemsView.propTypes = {\n  playlistItemsList: PropTypes.arrayOf(PropTypes.object).isRequired,\n  hasMore: PropTypes.bool.isRequired,\n  next: PropTypes.func.isRequired,\n};\n\nexport default PlaylistItemsView;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nimport { listPlaylistItems, listVideos } from \"../../api/apiHandler\";\n\nconst initialState = {\n  playlistItemsList: [],\n  playlistItemsError: {},\n  playlistItemsToken: \"\",\n};\n\nconst playlistItemsSlice = createSlice({\n  name: \"playlistItems\",\n  initialState,\n  reducers: {\n    listPlaylistItemsSuccess(state, action) {\n      state.playlistItemsError = initialState.playlistItemsError;\n\n      state.playlistItemsList = action.payload.playlistItemsList;\n      state.playlistItemsToken = action.payload.playlistItemsToken;\n    },\n    listPlaylistItemsFailed(state, action) {\n      state.playlistItemsError = action.payload;\n    },\n  },\n});\n\nconst {\n  listPlaylistItemsSuccess,\n  listPlaylistItemsFailed,\n} = playlistItemsSlice.actions;\n\nconst fetchVideos = (result) => {\n  return async (dispatch, getState) => {\n    const ids = result.items.map((playlistItem) => {\n      return playlistItem.snippet.resourceId.videoId;\n    });\n\n    listVideos(ids)\n      .then((response) => {\n        result.items.forEach((playlistItem, i) => {\n          playlistItem.video = response.result.items[i];\n        });\n\n        if (result.prevPageToken) {\n          const { playlistItemsList } = getState().playlistItemsView;\n          result.items = playlistItemsList.concat(result.items);\n        }\n        dispatch(\n          listPlaylistItemsSuccess({\n            playlistItemsList: result.items,\n            playlistItemsToken: result.nextPageToken,\n          })\n        );\n        return true;\n      })\n      .catch((response) => {\n        dispatch(listPlaylistItemsFailed(response));\n      });\n  };\n};\n\nconst fetchPlaylistItems = (playlistId, pageToken) => {\n  return async (dispatch) => {\n    listPlaylistItems(playlistId, pageToken)\n      .then((response) => {\n        dispatch(fetchVideos(response.result));\n        return true;\n      })\n      .catch((response) => {\n        dispatch(listPlaylistItemsFailed(response));\n      });\n  };\n};\n\nexport { fetchPlaylistItems, fetchVideos };\n\nexport default playlistItemsSlice.reducer;\n","import React, { useCallback } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport HeaderView from \"./components/Header/HeaderView\";\nimport { updateUrl } from \"./components/Header/headerState\";\nimport PlaylistItemsView from \"./components/PlaylistItems/PlaylistItemsView\";\nimport { fetchPlaylistItems } from \"./components/PlaylistItems/playlistItemsState\";\nimport { isPlaylistUrl, getPlaylistId } from \"./utils/urlUtils\";\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  const { url } = useSelector((state) => {\n    return state.headerView;\n  });\n\n  const { playlistItemsList, playlistItemsToken } = useSelector((state) => {\n    return state.playlistItemsView;\n  });\n\n  const setUrl = useCallback(\n    (newUrl) => {\n      if (isPlaylistUrl(newUrl)) {\n        dispatch(updateUrl({ url: newUrl }));\n        dispatch(fetchPlaylistItems(getPlaylistId(newUrl)));\n      }\n    },\n    [dispatch]\n  );\n\n  const fetchMorePlaylistItems = useCallback(() => {\n    dispatch(fetchPlaylistItems(getPlaylistId(url), playlistItemsToken));\n  }, [url, playlistItemsToken, dispatch]);\n\n  return (\n    <>\n      <HeaderView url={url} setUrl={setUrl} />\n      {isPlaylistUrl(url) && playlistItemsList.length > 0 && (\n        <PlaylistItemsView\n          playlistItemsList={playlistItemsList}\n          hasMore={!!playlistItemsToken}\n          next={fetchMorePlaylistItems}\n        />\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import {\n  configureStore,\n  combineReducers,\n  getDefaultMiddleware,\n} from \"@reduxjs/toolkit\";\nimport {\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nimport headerState from \"./components/Header/headerState\";\nimport playlistItemsState from \"./components/PlaylistItems/playlistItemsState\";\n\nconst rootReducer = combineReducers({\n  headerView: headerState,\n  playlistItemsView: playlistItemsState,\n});\n\nconst persistConfig = {\n  key: \"root\",\n  version: 1,\n  storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n});\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { persistStore } from \"redux-persist\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nimport App from \"./App\";\nimport { initClient } from \"./api/apiHandler\";\nimport store from \"./store\";\n\nimport \"./index.css\";\n\nconst persistor = persistStore(store);\n\ninitClient()\n  .then(() => {\n    ReactDOM.render(\n      <React.StrictMode>\n        <Provider store={store}>\n          <PersistGate persistor={persistor}>\n            <App />\n          </PersistGate>\n        </Provider>\n      </React.StrictMode>,\n      document.getElementById(\"root\")\n    );\n    return true;\n  })\n  .catch(() => {\n    return false;\n  });\n"],"sourceRoot":""}