{"version":3,"sources":["api/apiHandler.js","components/Table/Table.jsx","components/Channels/ChannelsView.jsx","components/Channels/channelsSlice.js","utils/urlUtils.js","components/Header/HeaderView.jsx","components/Header/headerSlice.js","components/PlaylistItems/PlaylistItemsView.jsx","components/PlaylistItems/playlistItemsSlice.js","components/Playlists/PlaylistsView.jsx","components/Playlists/playlistsSlice.js","App.jsx","store.js","index.jsx"],"names":["googleAuth","googleUser","Table","columns","data","hasMore","next","useTable","useGridLayout","getTableProps","headerGroups","rows","prepareRow","dataLength","length","loader","id","className","map","headerGroup","headers","column","getHeaderProps","render","row","cells","cell","getCellProps","ChannelsView","channelsList","useMemo","Header","accessor","cloneDeep","channel","snippet","publishedAt","substring","discoveryDocs","scope","isAuthorized","getAuth","signIn","listChannels","pageToken","a","gapi","client","youtube","channels","list","part","maxResults","mine","listPlaylists","channelId","playlists","playlistId","listPlaylistItems","playlistItems","initialState","channelsToken","channelsError","channelsSlice","createSlice","name","reducers","listChannelsSuccess","state","action","payload","prevPageToken","concat","items","nextPageToken","listChannelsFailed","actions","getURL","url","URL","e","startsWith","channelRegExp","RegExp","isChannelUrl","urlObj","test","pathname","getChannelId","exec","isPlaylistUrl","searchParams","has","getPlaylistId","get","HeaderView","setUrl","useState","currentUrl","setCurrentUrl","searchDisabled","setSearchDisabled","onSearchButtonClicked","setTimeout","useEffect","type","value","onChange","target","onKeyDown","event","key","placeholder","disabled","onClick","icon","faRedo","faSearch","href","rel","faGithub","headerSlice","updateUrl","PlaylistItemsView","playlistItemsList","playlistItem","position","video","contentDetails","duration","replace","toLowerCase","playlistItemsToken","playlistItemsError","playlistItemsSlice","listPlaylistItemsSuccess","listPlaylistItemsFailed","fetchVideos","result","dispatch","ids","resourceId","videoId","listVideos","videos","response","forEach","i","fetchPlaylistItems","PlaylistsView","playlistsList","playlist","playlistsToken","playlistsError","playlistsSlice","listPlaylistsSuccess","listPlaylistsFailed","fetchPlaylists","App","useDispatch","useSelector","headerView","channelsView","playlistsView","playlistItemsView","useCallback","newUrl","fetchMorePlaylists","fetchMorePlaylistItems","rootReducer","combineReducers","channelsReducer","headerReducer","playlistItemsReducer","playlistsReducer","persistConfig","version","storage","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","PAUSE","PERSIST","PURGE","REGISTER","REHYDRATE","persistor","persistStore","load","init","apiKey","clientId","auth2","getAuthInstance","updateAuthStatus","currentUser","hasGrantedScopes","isSignedIn","listen","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.647bc387.chunk.js","sourcesContent":["import { apiKey, clientId } from \"./client_secrets.json\";\n\nconst discoveryDocs = [\n  \"https://www.googleapis.com/discovery/v1/apis/youtube/v3/rest\",\n];\nconst scope = \"https://www.googleapis.com/auth/youtube.readonly\";\n\nlet googleAuth;\nlet googleUser;\nlet isAuthorized = false;\n\nconst getAuth = () => {\n  if (isAuthorized) {\n    return googleUser;\n  }\n  return googleAuth.signIn();\n};\n\nconst initClient = () => {\n  gapi.load(\"client:auth2\", async () => {\n    await gapi.client.init({\n      apiKey,\n      clientId,\n      discoveryDocs,\n      scope,\n    });\n\n    googleAuth = gapi.auth2.getAuthInstance();\n    const updateAuthStatus = () => {\n      googleUser = googleAuth.currentUser.get();\n      isAuthorized = googleUser.hasGrantedScopes(scope);\n    };\n\n    googleAuth.isSignedIn.listen(updateAuthStatus);\n    updateAuthStatus();\n  });\n};\n\nconst listChannels = async (id, pageToken) => {\n  if (id === \"mine\") {\n    await getAuth();\n    return gapi.client.youtube.channels.list({\n      part: [\"snippet,contentDetails,statistics\"],\n      maxResults: 50,\n      mine: true,\n      pageToken,\n    });\n  }\n\n  return gapi.client.youtube.channels.list({\n    part: [\"snippet,contentDetails,statistics\"],\n    maxResults: 50,\n    id,\n    pageToken,\n  });\n};\n\nconst listPlaylists = {\n  channelId: async (channelId, pageToken) => {\n    if (channelId === \"mine\") {\n      await getAuth();\n      return gapi.client.youtube.playlists.list({\n        part: [\"snippet,contentDetails\"],\n        maxResults: 50,\n        mine: true,\n        pageToken,\n      });\n    }\n\n    return gapi.client.youtube.playlists.list({\n      part: [\"snippet,contentDetails\"],\n      maxResults: 50,\n      channelId,\n      pageToken,\n    });\n  },\n\n  playlistId: (id, pageToken) => {\n    return gapi.client.youtube.playlists.list({\n      part: [\"snippet,contentDetails\"],\n      maxResults: 50,\n      id,\n      pageToken,\n    });\n  },\n};\n\nconst listPlaylistItems = (playlistId, pageToken) => {\n  return gapi.client.youtube.playlistItems.list({\n    part: [\"snippet\"],\n    maxResults: 50,\n    playlistId,\n    pageToken,\n  });\n};\n\nconst listVideos = (id, pageToken) => {\n  return gapi.client.youtube.videos.list({\n    part: [\"snippet,contentDetails,statistics\"],\n    maxResults: 50,\n    id,\n    pageToken,\n  });\n};\n\nexport {\n  initClient,\n  listChannels,\n  listPlaylists,\n  listPlaylistItems,\n  listVideos,\n};\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { useGridLayout, useTable } from \"react-table\";\n\nimport \"./Table.css\";\n\nconst Table = ({ columns, data, hasMore, next }) => {\n  const { getTableProps, headerGroups, rows, prepareRow } = useTable(\n    {\n      columns,\n      data,\n    },\n    useGridLayout\n  );\n\n  return (\n    <InfiniteScroll\n      dataLength={rows.length}\n      hasMore={hasMore}\n      next={next}\n      loader={<div id=\"loader\">Loading...</div>}\n    >\n      <div {...getTableProps()} className=\"table\">\n        {headerGroups.map((headerGroup) => {\n          return headerGroup.headers.map((column) => {\n            return (\n              <div\n                key={column.id}\n                {...column.getHeaderProps()}\n                className=\"header\"\n              >\n                {column.render(\"Header\")}\n              </div>\n            );\n          });\n        })}\n        {rows.map((row) => {\n          return (\n            prepareRow(row) ||\n            row.cells.map((cell) => {\n              return (\n                <div {...cell.getCellProps()} className=\"cell\">\n                  {cell.render(\"Cell\")}\n                </div>\n              );\n            })\n          );\n        })}\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nTable.propTypes = {\n  columns: PropTypes.arrayOf(PropTypes.object).isRequired,\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  hasMore: PropTypes.bool.isRequired,\n  next: PropTypes.func.isRequired,\n};\n\nexport default Table;\n","import cloneDeep from \"lodash/cloneDeep\";\nimport PropTypes from \"prop-types\";\nimport React, { useMemo } from \"react\";\n\nimport Table from \"../Table/Table\";\n\nimport \"./ChannelsView.css\";\n\nconst ChannelsView = ({ channelsList, hasMore, next }) => {\n  const columns = useMemo(() => {\n    return [\n      {\n        Header: \"Channel title\",\n        accessor: \"snippet.title\",\n      },\n      {\n        Header: \"Created on\",\n        accessor: \"snippet.publishedAt\",\n      },\n      {\n        Header: \"Description\",\n        accessor: \"snippet.description\",\n      },\n      // {\n      //   Header: \"Views\",\n      //   accessor: \"statistics.viewCount\",\n      // },\n      // {\n      //   Header: \"Subscribers\",\n      //   accessor: \"statistics.subscriberCount\",\n      // },\n      {\n        Header: \"Videos\",\n        accessor: \"statistics.videoCount\",\n      },\n    ];\n  }, []);\n\n  const data = useMemo(() => {\n    return cloneDeep(channelsList).map((channel) => {\n      channel.snippet.publishedAt = channel.snippet.publishedAt.substring(\n        0,\n        10\n      );\n\n      return channel;\n    });\n  }, [channelsList]);\n\n  return (\n    <div id=\"channelsView\">\n      <Table columns={columns} data={data} hasMore={hasMore} next={next} />\n    </div>\n  );\n};\n\nChannelsView.propTypes = {\n  channelsList: PropTypes.arrayOf(PropTypes.object).isRequired,\n  hasMore: PropTypes.bool.isRequired,\n  next: PropTypes.func.isRequired,\n};\n\nexport default ChannelsView;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nimport { listChannels } from \"../../api/apiHandler\";\n\nconst initialState = {\n  channelsList: [],\n  channelsToken: \"\",\n  channelsError: {},\n};\n\nconst channelsSlice = createSlice({\n  name: \"channels\",\n  initialState,\n  reducers: {\n    listChannelsSuccess(state, action) {\n      state.channelsError = initialState.channelsError;\n\n      if (action.payload.prevPageToken) {\n        state.channelsList = state.channelsList.concat(action.payload.items);\n      } else {\n        state.channelsList = action.payload.items;\n      }\n      state.channelsToken = action.payload.nextPageToken;\n    },\n    listChannelsFailed(state, action) {\n      state.channelsError = action.payload;\n    },\n  },\n});\n\nconst { listChannelsSuccess, listChannelsFailed } = channelsSlice.actions;\n\nconst fetchChannels = (channelId, pageToken) => {\n  return async (dispatch) => {\n    const response = await listChannels(channelId, pageToken);\n\n    if (response.result.items) {\n      dispatch(listChannelsSuccess(response.result));\n    } else {\n      dispatch(listChannelsFailed(response));\n    }\n  };\n};\n\nexport { fetchChannels };\n\nexport default channelsSlice.reducer;\n","const getURL = (url) => {\n  try {\n    return new URL(url);\n  } catch (e) {\n    if (!url || url.startsWith(\"http://\") || url.startsWith(\"https://\")) {\n      return null;\n    }\n    return getURL(`https://${url}`);\n  }\n};\n\nconst channelRegExp = new RegExp(/^\\/channel\\/([\\w-]+)$/);\n\nconst isChannelUrl = (url) => {\n  const urlObj = getURL(url);\n  if (urlObj) {\n    return channelRegExp.test(urlObj.pathname);\n  }\n  return false;\n};\n\nconst getChannelId = (url) => {\n  const urlObj = getURL(url);\n  if (urlObj) {\n    return channelRegExp.exec(urlObj.pathname)[1];\n  }\n  return null;\n};\n\nconst isPlaylistUrl = (url) => {\n  const urlObj = getURL(url);\n  if (urlObj) {\n    return urlObj.searchParams.has(\"list\");\n  }\n  return false;\n};\n\nconst getPlaylistId = (url) => {\n  const urlObj = getURL(url);\n  if (urlObj) {\n    return urlObj.searchParams.get(\"list\");\n  }\n  return null;\n};\n\nexport { isChannelUrl, getChannelId, isPlaylistUrl, getPlaylistId };\n","import { faGithub } from \"@fortawesome/free-brands-svg-icons\";\nimport { faRedo, faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport PropTypes from \"prop-types\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { isChannelUrl, isPlaylistUrl } from \"../../utils/urlUtils\";\nimport \"./HeaderView.css\";\n\nconst HeaderView = ({ url, setUrl }) => {\n  const [currentUrl, setCurrentUrl] = useState(url);\n  const [searchDisabled, setSearchDisabled] = useState(true);\n\n  const onCurrentUrlChanged = (e) => {\n    setCurrentUrl(e.target.value);\n  };\n\n  const onSearchButtonClicked = () => {\n    setUrl(currentUrl);\n    setSearchDisabled(true);\n    setTimeout(() => {\n      setSearchDisabled(false);\n    }, 3000);\n  };\n\n  const handleKeyDown = (event) => {\n    if (event.key === \"Enter\") {\n      onSearchButtonClicked();\n    }\n  };\n\n  useEffect(() => {\n    if (isChannelUrl(currentUrl) || isPlaylistUrl(currentUrl)) {\n      setSearchDisabled(false);\n    } else {\n      setSearchDisabled(true);\n    }\n  }, [url, currentUrl]);\n\n  return (\n    <div id=\"headerView\">\n      <input\n        id=\"url\"\n        type=\"text\"\n        value={currentUrl}\n        onChange={onCurrentUrlChanged}\n        onKeyDown={handleKeyDown}\n        placeholder=\"Channel or Playlist URL\"\n      />\n      <button\n        id=\"search\"\n        type=\"button\"\n        disabled={searchDisabled}\n        onClick={onSearchButtonClicked}\n      >\n        <FontAwesomeIcon icon={url === currentUrl ? faRedo : faSearch} />\n      </button>\n      <a\n        id=\"github\"\n        href=\"https://github.com/utkarshgupta137/youtube-playlist-manager\"\n        rel=\"noreferrer\"\n        target=\"_blank\"\n      >\n        <FontAwesomeIcon icon={faGithub} />\n      </a>\n    </div>\n  );\n};\n\nHeaderView.propTypes = {\n  url: PropTypes.string.isRequired,\n  setUrl: PropTypes.func.isRequired,\n};\n\nexport default HeaderView;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  url: \"https://www.youtube.com/channel/mine\",\n};\n\nconst headerSlice = createSlice({\n  name: \"header\",\n  initialState,\n  reducers: {\n    updateUrl(state, action) {\n      state.url = action.payload.url;\n    },\n  },\n});\n\nexport const { updateUrl } = headerSlice.actions;\n\nexport default headerSlice.reducer;\n","import cloneDeep from \"lodash/cloneDeep\";\nimport PropTypes from \"prop-types\";\nimport React, { useMemo } from \"react\";\n\nimport Table from \"../Table/Table\";\n\nimport \"./PlaylistItemsView.css\";\n\nconst PlaylistItemsView = ({ playlistItemsList, hasMore, next }) => {\n  const columns = useMemo(() => {\n    return [\n      {\n        Header: \"Position\",\n        accessor: \"snippet.position\",\n      },\n      {\n        Header: \"Added by\",\n        accessor: \"snippet.channelTitle\",\n      },\n      {\n        Header: \"Added on\",\n        accessor: \"snippet.publishedAt\",\n      },\n      {\n        Header: \"Video title\",\n        accessor: \"video.snippet.title\",\n      },\n      {\n        Header: \"Channel title\",\n        accessor: \"video.snippet.channelTitle\",\n      },\n      {\n        Header: \"Published on\",\n        accessor: \"video.snippet.publishedAt\",\n      },\n      {\n        Header: \"Duration\",\n        accessor: \"video.contentDetails.duration\",\n      },\n      // {\n      //   Header: \"View Count\",\n      //   accessor: \"video.statistics.viewCount\",\n      // },\n      // {\n      //   Header: \"Like Count\",\n      //   accessor: \"video.statistics.likeCount\",\n      // },\n      // {\n      //   Header: \"Dislike Count\",\n      //   accessor: \"video.statistics.dislikeCount\",\n      // },\n      // {\n      //   Header: \"Comment Count\",\n      //   accessor: \"video.statistics.commentCount\",\n      // },\n    ];\n  }, []);\n\n  const data = useMemo(() => {\n    return cloneDeep(playlistItemsList).map((playlistItem) => {\n      playlistItem.snippet.position += 1;\n      playlistItem.snippet.publishedAt = playlistItem.snippet.publishedAt.substring(\n        0,\n        10\n      );\n\n      if (playlistItem.video) {\n        playlistItem.video.snippet.publishedAt = playlistItem.video.snippet.publishedAt.substring(\n          0,\n          10\n        );\n        playlistItem.video.contentDetails.duration = playlistItem.video.contentDetails.duration\n          .replace(\"P\", \"\")\n          .replace(\"T\", \"\")\n          .toLowerCase();\n      }\n\n      return playlistItem;\n    });\n  }, [playlistItemsList]);\n\n  return (\n    <div id=\"playlistItemsView\">\n      <Table columns={columns} data={data} hasMore={hasMore} next={next} />\n    </div>\n  );\n};\n\nPlaylistItemsView.propTypes = {\n  playlistItemsList: PropTypes.arrayOf(PropTypes.object).isRequired,\n  hasMore: PropTypes.bool.isRequired,\n  next: PropTypes.func.isRequired,\n};\n\nexport default PlaylistItemsView;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nimport { listPlaylistItems, listVideos } from \"../../api/apiHandler\";\n\nconst initialState = {\n  playlistItemsList: [],\n  playlistItemsToken: \"\",\n  playlistItemsError: {},\n};\n\nconst playlistItemsSlice = createSlice({\n  name: \"playlistItems\",\n  initialState,\n  reducers: {\n    listPlaylistItemsSuccess(state, action) {\n      state.playlistItemsError = initialState.playlistItemsError;\n\n      if (action.payload.prevPageToken) {\n        state.playlistItemsList = state.playlistItemsList.concat(\n          action.payload.items\n        );\n      } else {\n        state.playlistItemsList = action.payload.items;\n      }\n      state.playlistItemsToken = action.payload.nextPageToken;\n    },\n    listPlaylistItemsFailed(state, action) {\n      state.playlistItemsError = action.payload;\n    },\n  },\n});\n\nconst {\n  listPlaylistItemsSuccess,\n  listPlaylistItemsFailed,\n} = playlistItemsSlice.actions;\n\nconst fetchVideos = (result) => {\n  return async (dispatch) => {\n    const ids = result.items.map((playlistItem) => {\n      return playlistItem.snippet.resourceId.videoId;\n    });\n    const response = await listVideos(ids);\n\n    if (response.result.items) {\n      result.items.forEach((playlistItem, i) => {\n        playlistItem.video = response.result.items[i];\n      });\n\n      dispatch(listPlaylistItemsSuccess(result));\n    } else {\n      dispatch(listPlaylistItemsFailed(response));\n    }\n  };\n};\n\nconst fetchPlaylistItems = (playlistId, pageToken) => {\n  return async (dispatch) => {\n    const response = await listPlaylistItems(playlistId, pageToken);\n\n    if (response.result.items) {\n      dispatch(fetchVideos(response.result));\n    } else {\n      dispatch(listPlaylistItemsFailed(response));\n    }\n  };\n};\n\nexport { fetchPlaylistItems, fetchVideos };\n\nexport default playlistItemsSlice.reducer;\n","import cloneDeep from \"lodash/cloneDeep\";\nimport PropTypes from \"prop-types\";\nimport React, { useMemo } from \"react\";\n\nimport Table from \"../Table/Table\";\n\nimport \"./PlaylistsView.css\";\n\nconst PlaylistsView = ({ playlistsList, hasMore, next }) => {\n  const columns = useMemo(() => {\n    return [\n      {\n        Header: \"Created by\",\n        accessor: \"snippet.channelTitle\",\n      },\n      {\n        Header: \"Published on\",\n        accessor: \"snippet.publishedAt\",\n      },\n      {\n        Header: \"Playlist title\",\n        accessor: \"snippet.title\",\n      },\n      {\n        Header: \"Description\",\n        accessor: \"snippet.description\",\n      },\n      {\n        Header: \"Videos\",\n        accessor: \"contentDetails.itemCount\",\n      },\n    ];\n  }, []);\n\n  const data = useMemo(() => {\n    return cloneDeep(playlistsList).map((playlist) => {\n      playlist.snippet.publishedAt = playlist.snippet.publishedAt.substring(\n        0,\n        10\n      );\n\n      return playlist;\n    });\n  }, [playlistsList]);\n\n  return (\n    <div id=\"playlistsView\">\n      <Table columns={columns} data={data} hasMore={hasMore} next={next} />\n    </div>\n  );\n};\n\nPlaylistsView.propTypes = {\n  playlistsList: PropTypes.arrayOf(PropTypes.object).isRequired,\n  hasMore: PropTypes.bool.isRequired,\n  next: PropTypes.func.isRequired,\n};\n\nexport default PlaylistsView;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nimport { listPlaylists } from \"../../api/apiHandler\";\n\nconst initialState = {\n  playlistsList: [],\n  playlistsToken: \"\",\n  playlistsError: {},\n};\n\nconst playlistsSlice = createSlice({\n  name: \"playlists\",\n  initialState,\n  reducers: {\n    listPlaylistsSuccess(state, action) {\n      state.playlistsError = initialState.playlistsError;\n\n      if (action.payload.prevPageToken) {\n        state.playlistsList = state.playlistsList.concat(action.payload.items);\n      } else {\n        state.playlistsList = action.payload.items;\n      }\n      state.playlistsToken = action.payload.nextPageToken;\n    },\n    listPlaylistsFailed(state, action) {\n      state.playlistsError = action.payload;\n    },\n  },\n});\n\nconst { listPlaylistsSuccess, listPlaylistsFailed } = playlistsSlice.actions;\n\nconst fetchPlaylists = {\n  channelId: (channelId, pageToken) => {\n    return async (dispatch) => {\n      const response = await listPlaylists.channelId(channelId, pageToken);\n\n      if (response.result.items) {\n        dispatch(listPlaylistsSuccess(response.result));\n      } else {\n        dispatch(listPlaylistsFailed(response));\n      }\n    };\n  },\n\n  playlistId: (playlistId, pageToken) => {\n    return async (dispatch) => {\n      const response = await listPlaylists.playlistId(playlistId, pageToken);\n\n      if (response.result.items) {\n        dispatch(listPlaylistsSuccess(response.result));\n      } else {\n        dispatch(listPlaylistsFailed(response));\n      }\n    };\n  },\n};\n\nexport { fetchPlaylists };\n\nexport default playlistsSlice.reducer;\n","import React, { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport ChannelsView from \"./components/Channels/ChannelsView\";\nimport { fetchChannels } from \"./components/Channels/channelsSlice\";\nimport HeaderView from \"./components/Header/HeaderView\";\nimport { updateUrl } from \"./components/Header/headerSlice\";\nimport PlaylistItemsView from \"./components/PlaylistItems/PlaylistItemsView\";\nimport { fetchPlaylistItems } from \"./components/PlaylistItems/playlistItemsSlice\";\nimport PlaylistsView from \"./components/Playlists/PlaylistsView\";\nimport { fetchPlaylists } from \"./components/Playlists/playlistsSlice\";\nimport {\n  getChannelId,\n  getPlaylistId,\n  isChannelUrl,\n  isPlaylistUrl,\n} from \"./utils/urlUtils\";\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  const { url } = useSelector((state) => {\n    return state.headerView;\n  });\n\n  const { channelsList } = useSelector((state) => {\n    return state.channelsView;\n  });\n\n  const { playlistsList, playlistsToken } = useSelector((state) => {\n    return state.playlistsView;\n  });\n\n  const { playlistItemsList, playlistItemsToken } = useSelector((state) => {\n    return state.playlistItemsView;\n  });\n\n  const setUrl = useCallback(\n    (newUrl) => {\n      if (isChannelUrl(newUrl)) {\n        dispatch(updateUrl({ url: newUrl }));\n        dispatch(fetchChannels(getChannelId(newUrl)));\n        dispatch(fetchPlaylists.channelId(getChannelId(newUrl)));\n      } else if (isPlaylistUrl(newUrl)) {\n        dispatch(updateUrl({ url: newUrl }));\n        dispatch(fetchPlaylists.playlistId(getPlaylistId(newUrl)));\n        dispatch(fetchPlaylistItems(getPlaylistId(newUrl)));\n      }\n    },\n    [dispatch]\n  );\n\n  const fetchMorePlaylists = useCallback(() => {\n    dispatch(fetchPlaylists.channelId(getChannelId(url), playlistsToken));\n  }, [url, playlistsToken, dispatch]);\n\n  const fetchMorePlaylistItems = useCallback(() => {\n    dispatch(fetchPlaylistItems(getPlaylistId(url), playlistItemsToken));\n  }, [url, playlistItemsToken, dispatch]);\n\n  return (\n    <>\n      <HeaderView url={url} setUrl={setUrl} />\n      {channelsList.length > 0 && isChannelUrl(url) && (\n        <ChannelsView\n          channelsList={channelsList}\n          hasMore={false}\n          next={() => {}}\n        />\n      )}\n      {playlistsList.length > 0 && (\n        <PlaylistsView\n          playlistsList={playlistsList}\n          hasMore={!!playlistsToken}\n          next={fetchMorePlaylists}\n        />\n      )}\n      {playlistItemsList.length > 0 && isPlaylistUrl(url) && (\n        <PlaylistItemsView\n          playlistItemsList={playlistItemsList}\n          hasMore={!!playlistItemsToken}\n          next={fetchMorePlaylistItems}\n        />\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\nimport {\n  FLUSH,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n  REHYDRATE,\n  persistReducer,\n  persistStore,\n} from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nimport channelsReducer from \"./components/Channels/channelsSlice\";\nimport headerReducer from \"./components/Header/headerSlice\";\nimport playlistItemsReducer from \"./components/PlaylistItems/playlistItemsSlice\";\nimport playlistsReducer from \"./components/Playlists/playlistsSlice\";\n\nconst rootReducer = combineReducers({\n  channelsView: channelsReducer,\n  headerView: headerReducer,\n  playlistItemsView: playlistItemsReducer,\n  playlistsView: playlistsReducer,\n});\n\nconst persistConfig = {\n  key: \"root\",\n  version: 1,\n  storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) => {\n    return getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, PAUSE, PERSIST, PURGE, REGISTER, REHYDRATE],\n      },\n    });\n  },\n});\n\nconst persistor = persistStore(store);\n// persistor.purge();\n// persistor.pause();\n\nexport default store;\n\nexport { persistor };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nimport App from \"./App\";\nimport { initClient } from \"./api/apiHandler\";\nimport store, { persistor } from \"./store\";\n\nimport \"./index.css\";\n\ninitClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}